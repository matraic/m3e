import { LitElement } from "lit";

import { Constructor } from "./Constructor";

/** Specifies valid values for the ARIA `role` attribute. */
export type ARIARole =
  | "alert"
  | "alertdialog"
  | "button"
  | "checkbox"
  | "dialog"
  | "gridcell"
  | "link"
  | "log"
  | "marquee"
  | "menuitem"
  | "menuitemcheckbox"
  | "menuitemradio"
  | "option"
  | "progressbar"
  | "radio"
  | "scrollbar"
  | "searchbox"
  | "slider"
  | "spinbutton"
  | "status"
  | "switch"
  | "tab"
  | "tabpanel"
  | "textbox"
  | "timer"
  | "tooltip"
  | "treeitem"
  | "combobox"
  | "grid"
  | "listbox"
  | "menu"
  | "menubar"
  | "radiogroup"
  | "tablist"
  | "tree"
  | "treegrid"
  | "application"
  | "article"
  | "cell"
  | "columnheader"
  | "definition"
  | "directory"
  | "document"
  | "feed"
  | "figure"
  | "group"
  | "heading"
  | "img"
  | "list"
  | "listitem"
  | "math"
  | "none"
  | "note"
  | "presentation"
  | "region"
  | "row"
  | "rowgroup"
  | "rowheader"
  | "separator"
  | "table"
  | "term"
  | "text"
  | "toolbar"
  | "banner"
  | "complementary"
  | "contentinfo"
  | "form"
  | "main"
  | "navigation"
  | "region"
  | "search"
  | "doc-abstract"
  | "doc-acknowledgments"
  | "doc-afterword"
  | "doc-appendix"
  | "doc-backlink"
  | "doc-biblioentry"
  | "doc-bibliography"
  | "doc-biblioref"
  | "doc-chapter"
  | "doc-colophon"
  | "doc-conclusion"
  | "doc-cover"
  | "doc-credit"
  | "doc-credits"
  | "doc-dedication"
  | "doc-endnote"
  | "doc-endnotes"
  | "doc-epigraph"
  | "doc-epilogue"
  | "doc-errata"
  | "doc-example"
  | "doc-footnote"
  | "doc-foreword"
  | "doc-glossary"
  | "doc-glossref"
  | "doc-index"
  | "doc-introduction"
  | "doc-noteref"
  | "doc-notice"
  | "doc-pagebreak"
  | "doc-pagelist"
  | "doc-part"
  | "doc-preface"
  | "doc-prologue"
  | "doc-pullquote"
  | "doc-qna"
  | "doc-subtitle"
  | "doc-tip"
  | "doc-toc";

/**
 * Mixin to augment an element with an ARIA role.
 * @template T The type of the base class.
 * @param {T} base The base class.
 * @param {ARIARole} role The ARIA role.
 * @returns {Constructor & T} A constructor that implements focusable behavior.
 */
export function Role<T extends Constructor<LitElement>>(base: T, role: ARIARole): Constructor & T {
  abstract class _RoleMixin extends base {
    /** @inheritdoc */
    override connectedCallback(): void {
      this.role = this.role || role;
      super.connectedCallback();
    }
  }

  return _RoleMixin;
}
